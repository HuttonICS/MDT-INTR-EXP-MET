Development Notes
=================

Development process
-------------------

This experiment is written within the web-based oTree Studio environment. Any
changes are exported as a tar-ball named ``*-MDT-INTR-EXP-MET.otreezip`` (with
a random three letter prefix), which we unzip, test, and check into version
control:

.. code:: console

    $ ./unpack_otreezip
    $ otree test
    $ git commit . -m "Changes from oTree Studio"

Here ``unpack_otreezip`` is a script which streamlines finding the latest
``~/Downloads/*-MDT-INTR-EXP-MET.otreezip`` and calling ``otree unzip``.

For the git commit, beware that additional care is needed if any of the folder
names have changed (by creating or renaming an "App" within oTree Studio).

If the changes fail our pre-commit hook objects, fixes need to be made within
oTree (e.g. remove trailing whitespace), and a fresh tar-ball downloaded,
unzipped, and committed instead.

Note that we have to avoid directly editing the files generated by oTree
Studio!

Files outside of oTree Studio include the text documentation, and test bots
``*/tests.py`` (functionality not available in the basic oTree Studio tier).

For deployment to oTree Hub and Heroku, we need to zip the files up again.
We could use ``otree zip`` but that will include any incidental files not
under git version control. Instead:

.. code:: console

    $ ./repack_otreezip

This will create (or replace) file ``MDT-INTR-EXP-MET.otreezip`` for upload.


Python style conventions
------------------------

Under the constraints of working within oTree Studio, the Python code tries to
follow the `PEP8 <https://www.python.org/dev/peps/pep-0008/>`__ style.

Practically, coding style is enforced with the command line tool `flake8
<http://flake8.pycqa.org/>`__ (with plugins) run via the tool `pre-commit
<https://pre-commit.com/>`__.

You can install these tools using:

.. code:: console

    $ pip install pre-commit
    $ pre-commit install  # within the repository main directory

The checks will then run automatically when you make a git commit. You can
also run the checks directly using:

.. code:: console

    $ pre-commit run -a

Since most of the files are autogenerated from oTree Studio, we have to live
with its choices for white space and use of ``from otree.api import *``, and
therefore many of the flake8 checks have had to be disabled in the ``.flake8``
settings.


Dependencies
------------

The ``requirements.txt`` file exported by oTree Studio declares the Python
dependencies (including the current version of oTree) which can be installed
from `PyPI <https://pypi.python.org/>`__ with the command:

.. code:: console

    $ pip install -r requirements.txt
